set nocompatible              " be iMproved, required
filetype off                  " required

"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" VUNDLE ENDS "


let mapleader = "\<Space>"

set tabstop=4
set shiftwidth=4
set smarttab
set number
set showmode
set showcmd
syntax on
"set foldmethod=syntax


" Fuzzy File Find
" Do not know the reason exactly :D
filetype plugin on

" Display all matching when tab complete
set wildmenu
" To enable find act like **fuzzy file find**
set path+=**
" you can also use :b and search for a file infact open it.

" Fuzzy File Find END


" TAGS
command! MakeTags !ctags -R .
" ^] to dive deeper!
" ^t to rise up!
" ~TAGS

" AUTOCOMPLETE:
" doc in |ins-completion|
"
" HIGHLIGHTS:
" ^x^n for JUST this file
" ^x^f for filenames ONLY
" ^x^] for tags only
" ^n or ^p changes the pop-up's order
" ~AUTOCOMPLETE


" SNIPPETS:
nnoremap <leader>cmain :-1read /home/demirel/.vim/.cfolder/.skeleton.main.c<CR>5ji
nnoremap <leader>cdocu :read /home/demirel/.vim/.cfolder/.documentation.header.c<CR>jA

" TABS ^
nnoremap tn :tabnew<Space>

nnoremap tm :tabmove<Space>

nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>

nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>

nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
"
" TABS $



" Aliases
" save all buffers in current tab!
nnoremap <leader>w :windo w<CR>
"

" Pre-Load Regs ^
"
" Print Macro
let @p='diWiprintf()<80>kl""<80>kl^[:^[^[p<80>@7a;^['

" Pre-Load Regs $
" 
"
"
"
"
"

